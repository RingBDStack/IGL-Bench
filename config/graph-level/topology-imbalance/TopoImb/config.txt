    parser.add_argument('--imb_ratio', type=float, default=0.9)
    parser.add_argument('--no-cuda', action='store_true', default=False,
                        help='Disables CUDA training.')
    parser.add_argument('--sparse', action='store_true', default=False,
                        help='whether use sparse adj matrix')
    parser.add_argument('--seed', type=int, default=0)

    parser.add_argument('--datatype', type=str, default='graph', choices=['node', 'graph'])
    parser.add_argument('--task', type=str, default='cls', choices=['cls', 'gcls', 'expl',
                                                                    'reweight'])  # cls: node classification; gcls: graph classification; expl: explanation
    parser.add_argument('--dataset', type=str,
                        default='BA_shapes')  # choices=['BA_shapes','infected','Tree_cycle','Tree_grid','LoadBA_shapes', 'LoadTree_cycle','LoadTree_grid','mutag', 'SpuriousMotif_{}'.format(mix_ratio), 'SST2','SST5','Twitter']

    parser.add_argument('--nlayer', type=int, default=2)  # intermediate feature dimension
    parser.add_argument('--nhid', type=int, default=128)  # intermediate feature dimension
    parser.add_argument('--nclass', type=int, default=2)  # number of labels
    parser.add_argument('--nfeat', type=int, default=64)  # input feature dimension
    parser.add_argument('--epochs', type=int, default=500,
                        help='Number of epochs to train.')
    parser.add_argument('--test_interval', type=int, default=20, help='Number of epochs to train.')
    parser.add_argument('--batch_size', type=int, default=128,
                        help='Number of batches inside an epoch.')
    parser.add_argument('--lr', type=float, default=0.001)
    parser.add_argument('--weight_decay', type=float, default=5e-4)
    parser.add_argument('--dropout', type=float, default=0.5)
    parser.add_argument('--batch_nums', type=int, default=6000, help='number of batches per epoch')

    parser.add_argument('--sup_ratio', type=float, default=0.1)
    parser.add_argument('--val_ratio', type=float, default=0.3)
    parser.add_argument('--test_ratio', type=float, default=0.6)
    parser.add_argument('--res', type=bool, default=False)

    parser.add_argument('--load', type=int,
                        default=None)  # load from pretrained model under the same setting, indicate load epoch
    parser.add_argument('--save', action='store_true', default=False, help='whether save checkpoints')
    parser.add_argument('--log', action='store_true', default=False,
                        help='whether creat tensorboard logs')
    parser.add_argument('--load_model', type=str,
                        default=None)  # To indicate pre-train in other folders. Like "./checkpoint/SpuriousMotif_0.3/best".

    parser.add_argument('--model', type=str, default='gcn',
                        choices=['sage', 'gcn', 'gin', 'wl_model'])
    parser.add_argument('--shared_encoder', action='store_true', default=False,
                        help='False: train one end-to-end model; True: for multi-task, train a shared encoder with task-wise heads')

    parser.add_argument('--load_config', action='store_true', default=False,
                        help='whether load training configurations')

    # explainer choices
    parser.add_argument('--explainer', type=str, default='gnnexplainer',
                        choices=['gnnexplainer', 'pgexplainer', 'pgexplainer2'])
    parser.add_argument('--directional', action='store_true', default=False,
                        help='whether taking graph as directional or not in explanation')
    parser.add_argument('--edge_size', type=float, default=0.05, help='control edge mask sparsity')
    parser.add_argument('--edge_ent', type=float, default=1.0, help='control edge entropy weight')
    parser.add_argument('--expl_loss', type=str, default='Tgt', choices=['Tgt', 'Entropy', 'Dif'])  #
    parser.add_argument('--aligner', type=str, default='emb', choices=['emb', 'anchor', 'both'])  #
    parser.add_argument('--aligner_combine_weight', type=float, default=1.0)  #
    parser.add_argument('--align_emb', action='store_true', default=False,
                        help='whether aligning embeddings in obtaining explanation')
    parser.add_argument('--align_with_grad', action='store_true', default=False,
                        help='whether aligning embeddings in obtaining explanation with gradient-based weighting')
    parser.add_argument('--align_weight', type=float, default=1.0)
    parser.add_argument('--split', type=int, default=0)  # 0: split_graph(); 1: split_graph_arti()

    # topo-test choices
    parser.add_argument('--topo_initial', type=str, default='label', choices=['label', 'mlp', 'emb'])
    parser.add_argument('--reweight_lr', type=float, default=0.01)
    parser.add_argument('--reweight_weight', type=float, default=0.2)
    parser.add_argument('--reweighter', type=str, default='struct', choices=['struct', 'structATT', 'class', 'gcn'])
    parser.add_argument('--n_mem', type=int, nargs='+', default=[8, 8, 8, 8, 8],
                        help='List of memory sizes for each layer')
    parser.add_argument('--use_key', action='store_true', default=False, help='whether use key in memory')
    parser.add_argument('--att', type=str, default='dp', choices=['dp', 'mlp'])
    parser.add_argument('--adv_step', type=int, default=3)
    parser.add_argument('--EM', action='store_true', default=False, help='whether use EM update')
    parser.add_argument('--pretrain_reweighter', action='store_true', default=False,
                        help='whether pretrain the reweighter')

    # setting for ImbTopo dataset
    parser.add_argument('--intra_im_ratio', type=float, default=0.1)
    parser.add_argument('--inter_im_ratio', type=float, default=0.6)
    parser.add_argument('--reweight_task', type=str, nargs='+')  # choices=['cls', 'wlcls']

    # baseline
    parser.add_argument('--baseline', type=str, default='no',
                        choices=['no', 'reweight', 'EMsmote', 'focal', 'oversample'])

    # split
    parser.add_argument('--split_mode', type=str, default='high')
    parser.add_argument('--split_seed', type=int, default=0)
    parser.add_argument('--split_test', dest='split_test', action='store_true', help='Set flag to True')
    parser.add_argument('--no-split_test', dest='split_test', action='store_false', help='Set flag to False')
    parser.set_defaults(split_test=False)
    parser.add_argument('--silhouette', dest='silhouette', action='store_true', help='Set flag to True')
    parser.set_defaults(silhouette=False)

    # early_stop
    parser.add_argument('--early_stop', type=int, default=100)